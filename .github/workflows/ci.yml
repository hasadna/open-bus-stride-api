name: CI
on:
  push:
  pull_request:
    types: [synchronize, opened, reopened, ready_for_review]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
      - name: Clone DB and Install Dependencies
        run: |
          git clone https://github.com/hasadna/open-bus-stride-db.git ../open-bus-stride-db
          pip install -r requirements-dev.txt
          pip install -r tests/requirements.txt
      - name: Docker Login
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "${GITHUB_TOKEN}" | docker login ghcr.io -u hasadna --password-stdin
      - name: Build Docker Image
        env:
          DOCKER_APP_IMAGE_NAME: "ghcr.io/hasadna/open-bus-stride-api/open-bus-stride-api"
        run: |
          if docker pull "${DOCKER_APP_IMAGE_NAME}:latest"; then
            CACHE_FROM_ARG="--cache-from ${DOCKER_APP_IMAGE_NAME}:latest"
          else
            CACHE_FROM_ARG=""
          fi
          docker build $CACHE_FROM_ARG --build-arg VERSION=${GITHUB_SHA} -t app .
          docker tag app "${DOCKER_APP_IMAGE_NAME}:${GITHUB_SHA}"

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
      - name: Clone DB and Install Dependencies
        run: |
          git clone https://github.com/hasadna/open-bus-stride-db.git ../open-bus-stride-db
          pip install -r requirements-dev.txt
          pip install -r tests/requirements.txt
      - name: Run Tests
        run: pytest

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '--no-deploy') }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
      - name: Clone DB and Install Dependencies
        run: |
          git clone https://github.com/hasadna/open-bus-stride-db.git ../open-bus-stride-db
          pip install -r requirements-dev.txt
          pip install -r tests/requirements.txt
      - name: Docker Login
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "${GITHUB_TOKEN}" | docker login ghcr.io -u hasadna --password-stdin
      - name: Push Docker Images
        env:
          DOCKER_APP_IMAGE_NAME: "ghcr.io/hasadna/open-bus-stride-api/open-bus-stride-api"
        run: |
          docker push "${DOCKER_APP_IMAGE_NAME}:${GITHUB_SHA}"
          docker tag app "${DOCKER_APP_IMAGE_NAME}:latest"
          docker push "${DOCKER_APP_IMAGE_NAME}:latest"
      - name: Deploy to K8s & Update ETL
        env:
          HASADNA_K8S_DEPLOY_KEY: ${{ secrets.HASADNA_K8S_DEPLOY_KEY }}
          STRIDE_ETL_DEPLOY_KEY: ${{ secrets.STRIDE_ETL_DEPLOY_KEY }}
          DOCKER_APP_IMAGE_NAME: "ghcr.io/hasadna/open-bus-stride-api/open-bus-stride-api"
        run: |
          if ! git log -1 --pretty=format:"%s" | grep -- --no-deploy; then
            cd `mktemp -d`
            echo "${HASADNA_K8S_DEPLOY_KEY}" > hasadna_k8s_deploy_key
            chmod 400 hasadna_k8s_deploy_key
            export GIT_SSH_COMMAND="ssh -i `pwd`/hasadna_k8s_deploy_key -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
            git clone git@github.com:hasadna/hasadna-k8s.git
            cd hasadna-k8s
            python update_yaml.py '{"strideApiImage":"'"${DOCKER_APP_IMAGE_NAME}:${GITHUB_SHA}"'"}' apps/openbus/values-hasadna-auto-updated.yaml
            git config --global user.name "Open Bus Stride API CI"
            git config --global user.email "open-bus-stride-api-ci@localhost"
            git add apps/openbus/values-hasadna-auto-updated.yaml && git commit -m "automatic update of open bus stride api"
            git push origin master
            echo "${STRIDE_ETL_DEPLOY_KEY}" > stride_etl_deploy_key
            chmod 400 stride_etl_deploy_key
            export GIT_SSH_COMMAND="ssh -i `pwd`/stride_etl_deploy_key -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
            git clone git@github.com:hasadna/open-bus-stride-etl.git
            cd open-bus-stride-etl
            echo "${GITHUB_SHA}" > stride-api-latest-commit.txt
            git add stride-api-latest-commit.txt
            git commit -m "automatic update of open bus stride api dependencies"
            git push origin main
          fi

      - name: Extract semver-fragment from commit message
        id: extract
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          FRAGMENT=""
           if echo "$COMMIT_MSG" | grep -qi -- '--generate-skip'; then
            FRAGMENT="skip"
          elif echo "$COMMIT_MSG" | grep -qi -- '--generate-none'; then
            FRAGMENT="none"
          elif echo "$COMMIT_MSG" | grep -qi -- '--generate-patch'; then
            FRAGMENT="patch"
          elif echo "$COMMIT_MSG" | grep -qi -- '--generate-minor'; then
            FRAGMENT="minor"
          elif echo "$COMMIT_MSG" | grep -qi -- '--generate-major'; then
            FRAGMENT="major"
          fi
          echo "semver-fragment=$FRAGMENT" >> "$GITHUB_OUTPUT"

      - name: Trigger client generation
        if: ${{ steps.extract.outputs.semver-fragment != '' }}
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: hasadna/open-bus-api-client
          event-type: generate-client
          client-payload: >-
            {
              "semver-fragment": "${{ steps.extract.outputs.semver-fragment }}"
            }
